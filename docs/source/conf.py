"""
-*- coding: utf-8 -*-

EMA workbench documentation build configuration file, created by
sphinx-quickstart on Wed Sep 07 13:56:32 2011.

This file is execfile()d with the current directory set to its containing dir.

Note that not all possible configuration values are present in this
autogenerated file.

All configuration values have a default; values that are commented out
serve to show the default.
"""

import glob
import sys
import os
import os.path as osp
import re
import shutil
import string

HERE = osp.abspath(osp.dirname(__file__))

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.


sys.path.append(os.path.abspath("../../"))


# -- General configuration

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.3'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.doctest",
    "sphinx.ext.napoleon",
    "sphinx.ext.mathjax",
    "nbsphinx",
    "myst_parser",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["ytemplates"]

# The file extensions of source files.
# Sphinx considers the files with this suffix as sources.
# The value can be a dictionary mapping file extensions to file types.
source_suffix = {".rst": "restructuredtext", ".md": "markdown"}

pngmath_latex_preamble = "\\usepackage{cases}\n"

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "ema_workbench"
copyright = "2011-2022, J.H. Kwakkel"


# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
def establish_version():
    import ema_workbench

    version_info = ema_workbench.__version__
    version_match = re.search(r"^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)", version_info)

    return tuple(group for group in version_match.groups())


version_info = establish_version()
version = "{}.{}".format(*version_info[0:2])
# The full version, including alpha/beta/rc tags.
release = "{}.{}.{}".format(*version_info)

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
# language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ["_build", "**.ipynb_checkpoints"]

# The reST default role (used for this markup: `text`) to use for all documents.
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
show_authors = True

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# html_theme = 'classic'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = dict(
    github_user="quaquel",
    github_repo="EMAworkbench",
    github_version="/tree/master/docs/",
    # On master branch and new branch still in
    # pre-release status: true; else: false.
    in_progress="true",
    # On branches previous to "latest": true; else: false.
    outdated="false",
)

# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = "Exploratory Modeling Workbench"

# A shorter title for the navigation bar.  Default is the same as html_title.
html_short_title = "EMA workbench"

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["ystatic"]

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
# html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
html_sidebars = {"**": ["localtoc.html", "searchbox.html"]}

# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = None

# If false, no module index is generated.
# html_domain_indices = True

# If false, no index is generated.
# html_use_index = True

# If true, the index is split into individual pages for each letter.
html_split_index = True

# If true, links to the reST sources are added to the pages.
# html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
# html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = "EMAworkbenchdoc"


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
# latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
# latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
    (
        "index",
        "EMAworkbench.tex",
        "EMA workbench Documentation",
        "J.H. Kwakkel",
        "manual",
    ),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
# latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
# latex_use_parts = False

# If true, show page references after internal links.
# latex_show_pagerefs = False

# If true, show URL addresses after external links.
# latex_show_urls = False

# Additional stuff for the LaTeX preamble.
# latex_preamble = ''

# Documents to append as an appendix to all manuals.
# latex_appendices = []

# If false, no module index is generated.
# latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [("index", "emaworkbench", "EMA workbench Documentation", ["J.H. Kwakkel"], 1)]


def setup_examples_pages():
    # create rst files for all examples
    # check what examples exist
    examples_folder = osp.join(HERE, "..", "..", "ema_workbench", "examples")
    examples = glob.glob(examples_folder + "/*.py")
    ignore_list = {"__init__", "test_examples", "model_debugger"}

    # get all existing rst files
    rst_files = glob.glob(os.path.join(HERE, "examples", "*.rst"))
    rst_files = {os.path.basename(os.path.normpath(entry)) for entry in rst_files}

    # check which rst files exist
    # TODO:: consider stripping out top level docstring and add this as normal text to example
    # TODO then only include remaining lines.
    with open(os.path.join(HERE, "example_template.txt")) as fh:
        template = string.Template(fh.read())

    # TODO:: at the moment no idea what happens if example is updated. Does this trigger a rebuild of the html page?
    examples_rst = []
    for example in examples:
        base_name = os.path.basename(os.path.normpath(example))
        base, ext = os.path.splitext(base_name)
        if base in ignore_list:
            continue

        short_py_filename = f"{base}.py"
        short_rst_filename = f"{base}.rst"
        headerline = "=" * len(short_py_filename)
        examples_rst.append(f"./examples/{short_rst_filename}")

        if short_rst_filename not in rst_files:
            with open(os.path.join(HERE, "examples", short_rst_filename), "w") as fh:
                content = template.substitute(
                    dict(short_filename=short_py_filename, headerline=headerline)
                )
                fh.write(content)
        else:
            rst_files.remove(short_rst_filename)

    # these rst files are outdated because the example has been removed
    for entry in rst_files:
        fn = os.path.join(HERE, "examples", entry)
        os.remove(fn)

    # copy and overwrite all notebooks
    # TODO:: make this smarter by only copying if timestamp is newer of file does not exist
    notebooks = glob.glob(examples_folder + "/*.ipynb")
    notebook_files = []
    for entry in notebooks:
        base_name = os.path.basename(os.path.normpath(entry))
        notebook_files.append(f"./examples/{base_name}")
        shutil.copy(entry, os.path.join(HERE, "examples", base_name))
        print(entry)

    # creeate examples.rst
    with open(os.path.join(HERE, "examples_template.txt")) as fh:
        template = string.Template(fh.read())

    with open(os.path.join(HERE, "examples.rst"), "w") as fh:
        content = template.substitute(
            dict(
                notebooks="\n    ".join(sorted(notebook_files)),
                python_files="\n    ".join(sorted(examples_rst)),
            )
        )
        fh.write(content)


def setup(app):
    # copy changelog into source folder for documentation
    dest = osp.join(HERE, "./getting_started/changelog.md")
    shutil.copy(osp.join(HERE, "..", "..", "CHANGELOG.md"), dest)
    setup_examples_pages()
